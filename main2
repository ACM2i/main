#include <iostream>
#include "SDL.h"
#include "SDL_image.h"
//#include <string>

using namespace std;

class LTexture
{
	public:
		//Initializes variables
		LTexture();

		//Deallocates memory
		~LTexture();

		//Loads image at specified path
		bool loadFromFile( std::string path );

		//Deallocates texture
		void free();

		//Renders texture at given point
		void render( int x, int y, SDL_Rect* clip = NULL );

		//Gets image dimensions
		int getWidth();
		int getHeight();

	private:
        SDL_Window *window;                    // Declare a window pointer
        SDL_Renderer *renderer;
		//Image dimensions
		int mWidth;
		int mHeight;
};

SDL_Texture* loadTexture( std::string path, SDL_Renderer *renderer)
{
    //The final texture
    SDL_Texture* newTexture = NULL;

    //Load image at specified path
    SDL_Surface* loadedSurface = IMG_Load( path.c_str() );
    if( loadedSurface == NULL )
    {
        printf( "Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError() );
    }
    else
    {
        //Create texture from surface pixels
        newTexture = SDL_CreateTextureFromSurface( renderer, loadedSurface );
        if( newTexture == NULL )
        {
            printf( "Unable to create texture from %s! SDL Error: %s\n", path.c_str(), SDL_GetError() );
        }

        //Get rid of old loaded surface
        SDL_FreeSurface( loadedSurface );
    }

    return newTexture;
}

int main(int argv, char** args)
{
    SDL_Rect rect;
    rect.x = 250;
    rect.y = 150;
    rect.w = 200;
    rect.h = 200;

    SDL_Window *window = NULL;                    // Declare a window pointer
    SDL_Renderer *renderer = NULL;
    SDL_Texture *bitmapTex = NULL;
    SDL_Surface *bitmapSurface = NULL;
    int posX = 100, posY = 100, screen_width = 640, screen_height = 480;

    Uint32 win_flags = SDL_WINDOW_SHOWN  | SDL_WINDOW_RESIZABLE;
    Uint32 init_flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO;

    if(SDL_Init(init_flags) < 0)
        cout << "initialization error: " << SDL_GetError() << endl;
    else
    {
        window = SDL_CreateWindow("An SDL2 window", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screen_width, screen_height,
                                  win_flags);
        if (window == NULL)
            cout << "window creation error: " << SDL_GetError() << endl;
        else
        {
            renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
            if( renderer == NULL )
			{
				printf( "Renderer could not be created! SDL Error: %s\n", SDL_GetError() );
			}
			else
			{
				//Initialize renderer color
				SDL_SetRenderDrawColor( renderer, 0xFF, 0xFF, 0xFF, 0xFF );

				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if( !( IMG_Init( imgFlags ) & imgFlags ) )
				{
					printf( "SDL_image could not initialize! SDL_mage Error: %s\n", IMG_GetError() );
				}
				SDL_bool loopShouldStop = SDL_FALSE;
                while (!loopShouldStop)
                {
                    SDL_Event event;
                    while (SDL_PollEvent(&event))
                    {
                        switch (event.type)
                        {
                            case SDL_QUIT:
                                loopShouldStop = SDL_TRUE;
                                break;
                        }
                    }

                    SDL_RenderClear(renderer);
                    //SDL_RenderCopy(renderer, bitmapTex, NULL, NULL);
                    SDL_RenderPresent(renderer);
                }
			}
        }
    }

    // The window is open: could enter program loop here (see SDL_PollEvent())

    /*bitmapSurface = SDL_LoadBMP("img/hello.bmp");
    bitmapTex = SDL_CreateTextureFromSurface(renderer, bitmapSurface);
    SDL_FreeSurface(bitmapSurface);*/


    // Close and destroy the window
    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(renderer);

    // Clean up
    SDL_Quit();
    return 0;
}
